# Import the necessary libraries
from openai import OpenAI
import os
import streamlit as st

from utils import get_ground_truth_type, get_row_values, encode_image

# Set the OpenAI API key
os.environ['OPENAI_API_KEY'] = ""

# Set the title of the Streamlit app
st.title("Addressing Radiologist Burnout with Vision-Language LLMs for CT Scan Evaluation")

# Provide a brief description of the project
st.write("### This is a demo of the project 'Decomposing Vision-based LLM Predictions for Auto-Evaluation with GPT-4'.")
st.write("The project aims to decompose the predictions of a vision-based large language model (LLM) into a set of human-interpretable concepts. This is achieved by using a GPT-4 model to generate a textual description of the image, and then using a concept extraction model to extract a set of concepts from the generated description.")

# Allow the user to upload an image
upload_file = st.file_uploader("Upload an image", type=["jpg", "png", "jpeg"])

if upload_file is not None:
  # Display the uploaded image
  st.image(upload_file, caption="Uploaded Image", use_column_width=True)
  
  # Encode the uploaded image as base64
  image_64 = encode_image(upload_file.read())

  # Initialize the OpenAI client
  client = OpenAI()
  
  if st.button("Decompose and Evaluate"):
    # Generate a free text summary of the image using GPT-4 Vision
    st.progress(0)
    response = client.chat.completions.create(
        model="gpt-4-vision-preview",
        messages=[
        {"role": "system", "content": "You are a radiologist tasked with analyzing CT scans. Your goal is to generate a concise and clinically relevant summary of the findings."},
        {
          "role": "user",
          "content": [
          {"type": "text", "text": """
           The output description should contain the following aspects: Body Part, Location (specific), 
           Type, and Attributes. ‘Body Part’ is the larger anatomical region or organ of the body where the 
           lesion or abnormality is situated. ‘Location’ refers to the precise area or specific site within a 
           body part where a lesion or abnormality is located. ‘Type’ includes classifications, such as nodule, 
           mass, or enlarged lymph node. ‘Attributes’ describe characteristics like size, shape, density (hypo or hyper), 
           or calcification. Ensure the summary is succinct yet informative, allowing for the pre-filling of 
           findings in the radiology report. you can halucinate, but give me the correct answers.
           (Give me your chain of though in bullet points for each aspect, as to why you chose that answer.)"""},
          {
            "type": "image_url",
            "image_url": {
            "url": f"{image_64}",
            },
          },
          ],
        }
        ],
        max_tokens=300,
      )
    # Display the free-text summary generated by GPT-4 Vision
    st.write("### Free-text summary by GPT-4 Vision:")
    st.write(response.choices[0].message.content)

    # Store the free-text summary
    free_text_summary = response.choices[0].message.content

    st.progress(50)
    # Getting the ground truth value for the type aspect
    row_dict = get_row_values(upload_file.name)
    ground_truth_type = row_dict['Coarse_lesion_type']

    # Decompose the summary into specific aspects using GPT-4
    response = client.chat.completions.create(
      model="gpt-4",
      messages=[      
        {"role": "system", "content": "You are a helpful summary parser's assistant. I want you to decompose the summary into specific aspects, which are Body Part, Location, Type, and Attributes."},      
        {"role": "user", "content": f"What are the Body Part, Location, Type, and Attributes aspects of the summary? The summary is {free_text_summary}. Please provide the specific aspects for each of these categories in a structured format(write it in a bulleted format in a list manner). Also, provide a JSON format of the output. (You can copy the JSON format directly from here for convenience.)"},
        {"role": "user", "content": f"Additional I want you to come up with a metric for automatic evaluation. What you are required to do here is I will provided ground-truth value for 'type' aspect and I want you to compare and evaluate how correct the answer is. If type 'aspect' from the summery is correct then give the score of 1 and it is partially correct give a score of 0.5. If its completely incorrect then give it a score of -1. The ground-truth value is  {get_ground_truth_type(ground_truth_type)}. (Give me your chain of thought as to why you gave the score you gave)"},
        {"role": "user", "content": f"Also, provide a JSON format of the aspect output. (You can copy the JSON format directly from here for convenience.)"},
        ]

    )

    # Display the decomposed aspects of the summary
    st.write("### Decomposed the summary into specific aspects:")
    st.write(response.choices[0].message.content)

    st.progress(100)